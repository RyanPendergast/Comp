#include <ctime>
#include <iostream>

using namespace std;

// This initilzes the  array from 0 to size-1
void initialize_array(int arr[], int size) {
    for (int i = 0; i < size; i++)
        arr[i] = i;
}

// This shuffles the array
int *shuffle_array(const int arr[], int size) {
    // Stores elements
    int *shuffledArr = new int[size];

    // Copy 
    for (int i = 0; i < size; i++)
        shuffledArr[i] = arr[i];

    // Random num
    srand(time(NULL));

    // Shuffle array
    for (int i = size - 1; i >= 0; i--) {
        int j = rand() % (i + 1);

        // Swapping
        int temp = shuffledArr[j];
        shuffledArr[j] = shuffledArr[i];
        shuffledArr[i] = temp;
    }

    return shuffledArr;
}

// prints in certain fashion
void print_array(const int arr[], int size) {
    cout << "[ ";

    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";

    cout << "]" << endl;
}

int *createOddArray(const int arr[], int size, int &sizeOdd) {
    for (int i = 0; i < size; i++)
        if (arr[i] % 2 == 1)
            sizeOdd++;

    int *oddArr = new int[sizeOdd];

    int j = 0;
    for (int i = 0; i < size; i++)
        if (arr[i] % 2 == 1)       // If a number is odd
            oddArr[j++] = arr[i];  // Add it to oddArr

    return oddArr;
}

int *createEvenArray(const int arr[], int size, int &sizeEven) {
    for (int i = 0; i < size; i++)
        if (arr[i] % 2 == 0)
            sizeEven++;

    int *evenArr = new int[sizeEven];

    int j = 0;
    for (int i = 0; i < size; i++)
        if (arr[i] % 2 == 0)        // If a number is even
            evenArr[j++] = arr[i];  // Add it to evenArr

    return evenArr;
}

void sort_array(int *arr, int size) {
    int m;  // Index of minimum number

    for (int i = 0; i < size - 1; i++) {
        m = i;
        for (int j = i + 1; j < size; j++)
            if (arr[j] < arr[m])
                m = j;

        int temp = arr[m];
        arr[m] = arr[i];
        arr[i] = temp;
    }
}

void array_war(int *arr1, int size1, int *arr2, int size2) {
    int size = (size1 > size2 ? size1 : size2);

    int *winnerArr = new int[size];
    int i = 0, j = 0;
    while (i < size1 && i < size2) {
        winnerArr[j] = (arr1[i] > arr2[i] ? arr1[i] : arr2[i]);
        i++;
        j++;
    }

    while (i < size1) {
        winnerArr[j] = arr1[i];
        i++;
        j++;
    }

    while (i < size2) {
        winnerArr[j] = arr2[i];
        i++;
        j++;
    }

    cout << "ArrayFight winners were: ";
    print_array(winnerArr, size);

    sort_array(winnerArr, size);  // Sort winner array

    cout << "Sorted ArrayFight winners were:";
    print_array(winnerArr, size);
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    while (size < 1 || size > 52) {
        cout << "Error: Invalid size entered.\n";
        cout << "Enter the size of the array: ";
        cin >> size;
    }

    int *arr = new int[size];
    initialize_array(arr, size);

    cout << "Original array is: ";
    print_array(arr, size);

    int *shuffledArr = shuffle_array(arr, size);
    cout << "Shuffled array is: ";
    print_array(shuffledArr, size);

    int oddSize = 0, evenSize = 0;
    int *oddArr = createOddArray(shuffledArr, size, oddSize);
    int *evenArr = createEvenArray(shuffledArr, size, evenSize);

    cout << "After call to createOddArray, oddArray is: ";
    print_array(oddArr, oddSize);
    cout << "After call to createEvenArray, evenArray is: ";
    print_array(evenArr, evenSize);

    array_war(oddArr, oddSize, evenArr, evenSize);

    return 0;
}
